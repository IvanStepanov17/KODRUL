package ru.kodrul.bot.abilities.hidden;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.telegram.abilitybots.api.objects.Ability;
import org.telegram.abilitybots.api.util.AbilityExtension;
import ru.kodrul.bot.common.CommonAbilityHelper;
import ru.kodrul.bot.entity.ChatGroup;
import ru.kodrul.bot.entity.GroupMember;
import ru.kodrul.bot.services.AuthorizationService;
import ru.kodrul.bot.services.GroupManagementService;
import ru.kodrul.bot.services.MemberManagementService;
import ru.kodrul.bot.services.SendService;
import ru.kodrul.bot.utils.Constants;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static org.telegram.abilitybots.api.objects.Locality.USER;
import static org.telegram.abilitybots.api.objects.Privacy.PUBLIC;

@Slf4j
@Component
@RequiredArgsConstructor
public class GroupManagementAbilityHidden implements AbilityExtension {

    private final GroupManagementService groupManagementService;
    private final AuthorizationService authorizationService;
    private final SendService sendService;
    private final CommonAbilityHelper commonAbilityHelper;
    private final MemberManagementService memberManagementService;

    public Ability createGroupHiddenAbility() {
        return Ability.builder()
                .name("creategrouphidden")
                .locality(USER)
                .privacy(PUBLIC)
                .action(ctx -> {

                    Long userId = ctx.user().getId();
                    if (!authorizationService.isTrustedUser(userId)) {
                        sendService.sendToUser(userId, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã");
                        log.warn("Unauthorized access attempt by user: {}", userId);
                        return;
                    }

                    String[] args = ctx.arguments();
                    if (args.length < 2) {
                        sendService.sendToUser(userId,
                                """
                                        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /creategrouphidden <chat_id> <–Ω–∞–∑–≤–∞–Ω–∏–µ_–≥—Ä—É–ø–ø—ã> [–æ–ø–∏—Å–∞–Ω–∏–µ]

                                        –ü—Ä–∏–º–µ—Ä: /creategrouphidden -100123456789 –ù–∞–∑–≤–∞–Ω–∏–µ–ì—Ä—É–ø–ø—ã –°–∫—Ä—ã—Ç–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞
                                        """
                        );
                        return;
                    }

                    try {
                        Long targetChatId = Long.parseLong(args[0]);
                        String groupName = args[1];
                        String description = String.join(" ", Arrays.copyOfRange(args, 2, args.length));

                        if (!commonAbilityHelper.isBotMemberOfChat(targetChatId)) {
                            sendService.sendToUser(userId,
                                    "‚ùå –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ –∏–ª–∏ —á–∞—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n" +
                                            "Chat ID: " + targetChatId);
                            return;
                        }

                        String chatTitle = commonAbilityHelper.getChatTitle(targetChatId);

                        ChatGroup group = groupManagementService.createGroup(
                                groupName, description, targetChatId, chatTitle, userId
                        );

                        String successMessage = String.format(
                                """
                                        ‚úÖ *–ì—Ä—É–ø–ø–∞ —Å–æ–∑–¥–∞–Ω–∞!*

                                        üìã *–ì—Ä—É–ø–ø–∞:* %s
                                        üí¨ *–ß–∞—Ç:* %s (ID: %d)
                                        %s\
                                        üë§ *–°–æ–∑–¥–∞–Ω–∞:* %s (ID: %d)
                                        üÜî *ID –≥—Ä—É–ø–ø—ã:* %d
                                """,
                                groupName,
                                chatTitle,
                                targetChatId,
                                "üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* " + description + "\n",
                                ctx.user().getFirstName(),
                                userId,
                                group.getId()
                        );

                        sendService.sendToUser(userId, successMessage, Constants.PARSE_MARKDOWN);
                        log.info("Group '{}' created by user {} for chat {}",
                                groupName, userId, targetChatId);

                    } catch (NumberFormatException e) {
                        sendService.sendToUser(userId, "‚ùå Chat ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º");
                    } catch (IllegalArgumentException e) {
                        sendService.sendToUser(userId, "‚ùå " + e.getMessage());
                    } catch (Exception e) {
                        log.error("Error creating group for user {}: {}", userId, e.getMessage(), e);
                        sendService.sendToUser(userId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã: " + e.getMessage());
                    }
                })
                .build();
    }

    public Ability addMembersAbility() {
        return Ability.builder()
                .name("addmembershidden")
                .locality(USER)
                .privacy(PUBLIC)
                .action(ctx -> {

                    Long userId = ctx.user().getId();
                    if (!authorizationService.isTrustedUser(userId)) {
                        sendService.sendToUser(userId, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã");
                        log.warn("Unauthorized access attempt by user: {}", userId);
                        return;
                    }

                    memberManagementService.handleMemberOperation(ctx, true, true);
                })
                .build();
    }

    public Ability removeMembersAbility() {
        return Ability.builder()
                .name("removemembershidden")
                .locality(USER)
                .privacy(PUBLIC)
                .action(ctx -> {

                    Long userId = ctx.user().getId();
                    if (!authorizationService.isTrustedUser(userId)) {
                        sendService.sendToUser(userId, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã");
                        log.warn("Unauthorized access attempt by user: {}", userId);
                        return;
                    }

                    memberManagementService.handleMemberOperation(ctx, false, true);
                })
                .build();
    }

    public Ability listGroupsAbility() {
        return Ability.builder()
                .name("listgroupshidden")
                .locality(USER)
                .privacy(PUBLIC)
                .input(1)
                .action(ctx -> {

                    Long userId = ctx.user().getId();
                    if (!authorizationService.isTrustedUser(userId)) {
                        sendService.sendToUser(userId, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã");
                        log.warn("Unauthorized access attempt by user: {}", userId);
                        return;
                    }

                    String[] args = ctx.arguments();

                    if (args.length < 1) {
                        sendService.sendToUser(userId,
                                """
                                        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /listgroupshidden <chat_id>
                                        
                                        –ü—Ä–∏–º–µ—Ä: /listgroupshidden -100123456789
                                        """
                        );
                        return;
                    }

                    Long targetChatId = Long.parseLong(args[0]);
                    List<ChatGroup> groups = groupManagementService.getChatGroups(targetChatId);
                    if (groups.isEmpty()) {
                        sendService.sendMessageToThread(ctx, "–í —ç—Ç–æ–º —á–∞—Ç–µ –µ—â–µ –Ω–µ—Ç –≥—Ä—É–ø–ø");
                        return;
                    }

                    StringBuilder response = new StringBuilder("üìã –ì—Ä—É–ø–ø—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ:\n\n");
                    groups.forEach(group ->
                            response.append(groupManagementService.formatGroupInfo(group)).append("\n\n")
                    );

                    sendService.sendMessageToThread(ctx, response.toString());
                })
                .build();
    }

    public Ability groupInfoAbility() {
        return Ability.builder()
                .name("groupinfohidden")
                .locality(USER)
                .privacy(PUBLIC)
                .input(2)
                .action(ctx -> {

                    Long userId = ctx.user().getId();
                    if (!authorizationService.isTrustedUser(userId)) {
                        sendService.sendToUser(userId, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã");
                        log.warn("Unauthorized access attempt by user: {}", userId);
                        return;
                    }

                    String[] args = ctx.arguments();

                    if (args.length < 2) {
                        sendService.sendToUser(userId,
                                """
                                        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /groupinfohidden <chat_id> <–Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã>
                                        
                                        –ü—Ä–∏–º–µ—Ä: /groupinfohidden -100123456789 –¢–µ—Å—Ç
                                        """
                        );
                        return;
                    }

                    try {
                        Long targetChatId = Long.parseLong(args[0]);
                        String groupName = args[1];
                        Optional<ChatGroup> groupOpt = groupManagementService.getGroupByNameWithMembersAndUsers(targetChatId, groupName);

                        if (groupOpt.isPresent()) {
                            ChatGroup group = groupOpt.get();

                            StringBuilder response = new StringBuilder();
                            response.append("üìä *–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ*\n\n");
                            response.append(groupManagementService.formatGroupInfoWithMembers(group)).append("\n\n");

                            if (group.getMembers() == null || group.getMembers().isEmpty()) {
                                response.append("üë• *–£—á–∞—Å—Ç–Ω–∏–∫–∏:* –≥—Ä—É–ø–ø–∞ –ø—É—Å—Ç–∞\n");
                            } else {
                                response.append("üë• *–£—á–∞—Å—Ç–Ω–∏–∫–∏ (").append(group.getMembers().size()).append("):*\n");

                                for (int i = 0; i < group.getMembers().size(); i++) {
                                    GroupMember member = group.getMembers().get(i);
                                    String userInfo = groupManagementService.formatUserInfoForGroup(member);
                                    response.append(i + 1).append(". ").append(userInfo).append("\n");
                                }
                            }

                            sendService.sendMessageToThread(ctx, response.toString(), Constants.PARSE_MARKDOWN);
                        } else {
                            sendService.sendMessageToThread(ctx, "‚ùå –ì—Ä—É–ø–ø–∞ '" + groupName + "' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ");
                        }
                    } catch (Exception e) {
                        log.error("Error getting group info", e);
                        sendService.sendMessageToThread(ctx, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ: " + e.getMessage());
                    }
                })
                .build();
    }

    public Ability addTrustedUserAbility() {
        return Ability.builder()
                .name("addtrusteduser")
                .locality(USER)
                .privacy(PUBLIC)
                .input(2)
                .action(ctx -> {
                    Long userId = ctx.user().getId();
                    if (!authorizationService.isTrustedUser(userId)) {
                        sendService.sendToUser(userId, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã");
                        log.warn("Unauthorized access attempt by user: {}", userId);
                        return;
                    }

                    String[] args = ctx.arguments();
                    if (args.length < 2) {
                        sendService.sendToUser(userId,
                                """
                                        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addtrusteduser <user_id> <admin_key>

                                        –ü—Ä–∏–º–µ—Ä: /addtrusteduser 123456789 —Å–µ–∫—Ä–µ—Ç–Ω—ã–π-–∫–ª—é—á
                                        """
                        );
                        return;
                    }

                    try {
                        Long newUserId = Long.parseLong(args[0]);
                        String adminKey = args[1];

                        authorizationService.addTrustedUser(newUserId, adminKey);

                        String message = String.format(
                                """
                                        ‚úÖ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ!*

                                        üë§ *User ID:* %d
                                        üìä *–í—Å–µ–≥–æ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö:* %d
                                """,
                                newUserId,
                                authorizationService.getTrustedUsersCount()
                        );

                        sendService.sendToUser(userId, message, Constants.PARSE_MARKDOWN);
                        log.info("User {} added trusted user: {}", userId, newUserId);

                    } catch (NumberFormatException e) {
                        sendService.sendToUser(userId, "‚ùå User ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º");
                    } catch (SecurityException e) {
                        sendService.sendToUser(userId, "‚ùå " + e.getMessage());
                    } catch (Exception e) {
                        log.error("Error adding trusted user by {}: {}", userId, e.getMessage(), e);
                        sendService.sendToUser(userId, "‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
                    }
                })
                .build();
    }

    public Ability listTrustedUsersAbility() {
        return Ability.builder()
                .name("listtrustedusers")
                .locality(USER)
                .privacy(PUBLIC)
                .action(ctx -> {
                    Long userId = ctx.user().getId();

                    if (!authorizationService.isTrustedUser(userId)) {
                        sendService.sendToUser(userId, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã");
                        return;
                    }

                    int count = authorizationService.getTrustedUsersCount();
                    sendService.sendToUser(userId,
                            "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n\n" +
                                    "üë• *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* " + count + "\n\n" +
                                    "üí° –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /addtrusteduser");
                })
                .build();
    }
}