package ru.kodrul.bot.abilities.hidden;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.telegram.abilitybots.api.objects.Ability;
import org.telegram.abilitybots.api.util.AbilityExtension;
import ru.kodrul.bot.common.CommonAbilityHelper;
import ru.kodrul.bot.entity.ChatGroup;
import ru.kodrul.bot.entity.ScheduledPost;
import ru.kodrul.bot.services.AuthorizationService;
import ru.kodrul.bot.services.GroupManagementService;
import ru.kodrul.bot.services.ScheduledPostService;
import ru.kodrul.bot.services.SendService;
import ru.kodrul.bot.utils.Constants;

import java.util.Optional;

import static org.telegram.abilitybots.api.objects.Locality.USER;
import static org.telegram.abilitybots.api.objects.Privacy.PUBLIC;

@Slf4j
@Component
@RequiredArgsConstructor
public class HiddenScheduleAbility implements AbilityExtension {

    private final ScheduledPostService scheduledPostService;
    private final GroupManagementService groupManagementService;
    private final AuthorizationService authorizationService;
    private final SendService sendService;
    private final CommonAbilityHelper commonAbilityHelper;

    public Ability createScheduleHiddenAbility() {
        return Ability.builder()
                .name("createschedulehidden")
                .info("–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)")
                .locality(USER)
                .privacy(PUBLIC)
                .input(0)
                .action(ctx -> {
                    String fullText = ctx.update().getMessage().getText();
                    String[] parts = fullText.split("\\s+", 5);

                    Long userId = ctx.user().getId();
                    if (!authorizationService.isTrustedUser(userId)) {
                        sendService.sendToUser(userId, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã");
                        log.warn("Unauthorized schedule access attempt by user: {}", userId);
                        return;
                    }

                    if (parts.length < 5) {
                        sendService.sendToUser(userId,
                                """
                                        üìÖ *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:* /createschedulehidden <chat_id> <–≥—Ä—É–ø–ø–∞> <—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ> <—Å–æ–æ–±—â–µ–Ω–∏–µ>

                                        *–ü—Ä–æ—Å—Ç—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:*
                                        ‚Ä¢ `09:00` - –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 9:00
                                        ‚Ä¢ `–ø–Ω,—Å—Ä,–ø—Ç 09:00` - –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º, —Å—Ä–µ–¥–∞–º –∏ –ø—è—Ç–Ω–∏—Ü–∞–º –≤ 9:00
                                        ‚Ä¢ `1,15 09:00` - 1 –∏ 15 —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞ –≤ 9:00
                                        ‚Ä¢ `–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ –≤c 12:00` - –∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 12:00
                                        
                                        *Cron-–≤—ã—Ä–∞–∂–µ–Ω–∏—è (–¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö):*
                                        ‚Ä¢ `0 0 9 * * ?` - –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 9:00
                                        ‚Ä¢ `0 0 9 ? * MON,WED,FRI` - –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º, —Å—Ä–µ–¥–∞–º, –ø—è—Ç–Ω–∏—Ü–∞–º –≤ 9:00
                                        ‚Ä¢ `0 0 9 1 * ?` - –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞ –≤ 9:00
                                        ‚Ä¢ `0 0 12 ? * SUN` - –∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 12:00
                                        
                                        *–î–Ω–∏ –Ω–µ–¥–µ–ª–∏:* –ø–Ω, –≤—Ç, —Å—Ä, —á—Ç, –ø—Ç, —Å–±, –≤—Å

                                        *–ü—Ä–∏–º–µ—Ä—ã:*
                                        /createschedulehidden -100123456789 –¢–µ—Å—Ç 09:00 "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!"
                                        /createschedulehidden -100123456789 –°–æ–∑–≤–æ–Ω "–ø–Ω,—Å—Ä,–ø—Ç 10:30" "–í—Ä–µ–º—è —Å–æ–∑–≤–æ–Ω–∞!"

                                        *–î–ª—è URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –∫–æ–Ω—Ü–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª*""",
                                Constants.PARSE_MARKDOWN);
                        return;
                    }

                    try {
                        Long targetChatId = Long.parseLong(parts[1]);
                        String groupName = parts[2];
                        String scheduleInput = parts[3];
                        String restOfText = parts[4];

                        if (!commonAbilityHelper.isBotMemberOfChat(targetChatId)) {
                            sendService.sendToUser(userId,
                                    "‚ùå –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ –∏–ª–∏ —á–∞—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n" +
                                            "Chat ID: " + targetChatId);
                            return;
                        }

                        Optional<ChatGroup> groupOpt = groupManagementService.getGroupByName(targetChatId, groupName);
                        if (groupOpt.isEmpty()) {
                            sendService.sendToUser(userId,
                                    "‚ùå –ì—Ä—É–ø–ø–∞ '" + groupName + "' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —á–∞—Ç–µ\n\n" +
                                            "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –≥—Ä—É–ø–ø—É –∫–æ–º–∞–Ω–¥–æ–π:\n" +
                                            "/creategrouphidden " + targetChatId + " " + groupName + " \"–û–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã\"");
                            return;
                        }

                        String messageText;
                        String imageUrl = null;

                        String[] textParts = restOfText.split("\\s+");
                        if (textParts.length > 1 &&
                                (textParts[textParts.length - 1].startsWith("http://") ||
                                        textParts[textParts.length - 1].startsWith("https://"))) {
                            imageUrl = textParts[textParts.length - 1];
                            messageText = restOfText.substring(0, restOfText.lastIndexOf(imageUrl)).trim();
                        } else {
                            messageText = restOfText;
                        }

                        String chatTitle = commonAbilityHelper.getChatTitle(targetChatId);

                        ScheduledPost schedule = scheduledPostService.createSchedule(
                                targetChatId, groupName, scheduleInput, messageText, imageUrl, userId
                        );

                        String successMessage = String.format(
                                """
                                        ‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!

                                        üìã –ì—Ä—É–ø–ø–∞: %s
                                        üí¨ –ß–∞—Ç: %s (ID: %d)
                                        ‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: %s
                                        ‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ: %s
                                        %s
                                        üë§ –°–æ–∑–¥–∞–Ω–æ: %s (ID: %d)
                                        üÜî ID —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: %d""",
                                groupName,
                                chatTitle,
                                targetChatId,
                                schedule.getDescription(),
                                messageText,
                                imageUrl != null ? "üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: + imageUrl + \n" : "",
                                ctx.user().getFirstName(),
                                userId,
                                schedule.getId()
                        );

                        sendService.sendToUser(userId, successMessage);
                        log.info("Schedule created by user {} for chat {}: {}",
                                userId, targetChatId, schedule.getDescription());

                    } catch (NumberFormatException e) {
                        sendService.sendToUser(userId, "‚ùå Chat ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º");
                    } catch (IllegalArgumentException e) {
                        sendService.sendToUser(userId, "‚ùå " + e.getMessage() + "\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /schedulehelp –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ —Ñ–æ—Ä–º–∞—Ç–∞–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è");
                    } catch (Exception e) {
                        log.error("Error creating schedule for user {}: {}", userId, e.getMessage(), e);
                        sendService.sendToUser(userId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: " + e.getMessage());
                    }
                })
                .build();
    }

    public Ability listSchedulesHiddenAbility() {
        return Ability.builder()
                .name("listscheduleshidden")
                .info("–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞")
                .locality(USER)
                .privacy(PUBLIC)
                .input(1)
                .action(ctx -> {
                    Long userId = ctx.user().getId();
                    if (!authorizationService.isTrustedUser(userId)) {
                        sendService.sendToUser(userId, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã");
                        return;
                    }

                    String[] args = ctx.arguments();
                    if (args.length < 1) {
                        sendService.sendToUser(userId,
                                """
                                        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /listscheduleshidden <chat_id>

                                        –ü—Ä–∏–º–µ—Ä: /listscheduleshidden -100123456789""");
                        return;
                    }

                    try {
                        Long targetChatId = Long.parseLong(args[0]);
                        String chatTitle = commonAbilityHelper.getChatTitle(targetChatId);

                        var schedules = scheduledPostService.getActiveSchedulesForChat(targetChatId);

                        if (schedules.isEmpty()) {
                            sendService.sendToUser(userId,
                                    "üì≠ –í —á–∞—Ç–µ '" + chatTitle + "' –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π");
                            return;
                        }

                        StringBuilder response = new StringBuilder();
                        response.append("üìÖ *–†–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —á–∞—Ç–∞:*\n")
                                .append("üí¨ *–ß–∞—Ç:* ").append(chatTitle).append(" (ID: ").append(targetChatId).append(")\n\n");

                        for (ScheduledPost schedule : schedules) {
                            response.append("üÜî *ID:* ").append(schedule.getId()).append("\n")
                                    .append("üìã *–ì—Ä—É–ø–ø–∞:* ").append(schedule.getGroupName()).append("\n")
                                    .append("‚è∞ *–ö–æ–≥–¥–∞:* ").append(schedule.getDescription()).append("\n")
                                    .append("üí¨ *–°–æ–æ–±—â–µ–Ω–∏–µ:* ").append(
                                            schedule.getMessageText().length() > 50 ?
                                                    schedule.getMessageText().substring(0, 50) + "..." :
                                                    schedule.getMessageText()
                                    ).append("\n");

                            if (schedule.getImageUrl() != null) {
                                response.append("üñºÔ∏è *–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:* –µ—Å—Ç—å\n");
                            }

                            if (schedule.getLastSent() != null) {
                                response.append("‚úÖ *–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—Ç–ø—Ä–∞–≤–∫–∞:* ").append(schedule.getLastSent().toLocalDate()).append("\n");
                            }

                            response.append("---\n");
                        }

                        response.append("\nüí° *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è–º–∏:*\n")
                                .append("/toggleschedulehidden <ID> on/off - –≤–∫–ª/–≤—ã–∫–ª\n")
                                .append("/deleteschedulehidden <ID> - —É–¥–∞–ª–∏—Ç—å\n")
                                .append("/scheduleinfohidden <ID> - –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏");

                        sendService.sendToUser(userId, response.toString(), Constants.PARSE_MARKDOWN);

                    } catch (NumberFormatException e) {
                        sendService.sendToUser(userId, "‚ùå Chat ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º");
                    } catch (Exception e) {
                        log.error("Error listing schedules for user {}: {}", userId, e.getMessage(), e);
                        sendService.sendToUser(userId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π: " + e.getMessage());
                    }
                })
                .build();
    }

    public Ability toggleScheduleHiddenAbility() {
        return Ability.builder()
                .name("toggleschedulehidden")
                .info("–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
                .locality(USER)
                .privacy(PUBLIC)
                .input(2)
                .action(ctx -> {
                    Long userId = ctx.user().getId();
                    if (!authorizationService.isTrustedUser(userId)) {
                        sendService.sendToUser(userId, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã");
                        return;
                    }

                    String[] args = ctx.arguments();
                    if (args.length < 2) {
                        sendService.sendToUser(userId, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /toggleschedulehidden <ID_—Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è> <on|off>");
                        return;
                    }

                    try {
                        Long scheduleId = Long.parseLong(args[0]);
                        boolean isActive = "on".equalsIgnoreCase(args[1]);

                        var scheduleOpt = scheduledPostService.findById(scheduleId);
                        if (scheduleOpt.isEmpty()) {
                            sendService.sendToUser(userId, "‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å ID " + scheduleId + " –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
                            return;
                        }

                        scheduledPostService.toggleSchedule(scheduleId, isActive);

                        ScheduledPost schedule = scheduleOpt.get();
                        String chatTitle = commonAbilityHelper.getChatTitle(schedule.getChatId());

                        String message = String.format(
                                """
                                        %s *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ %s!*

                                        üí¨ *–ß–∞—Ç:* %s
                                        üìã *–ì—Ä—É–ø–ø–∞:* %s
                                        ‚è∞ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:* %s
                                        üÜî *ID:* %d""",
                                isActive ? "‚úÖ" : "‚è∏Ô∏è",
                                isActive ? "–≤–∫–ª—é—á–µ–Ω–æ" : "–≤—ã–∫–ª—é—á–µ–Ω–æ",
                                chatTitle,
                                schedule.getGroupName(),
                                schedule.getDescription(),
                                scheduleId
                        );

                        sendService.sendToUser(userId, message, Constants.PARSE_MARKDOWN);
                        log.info("User {} toggled schedule {} to {}", userId, scheduleId, isActive);

                    } catch (NumberFormatException e) {
                        sendService.sendToUser(userId, "‚ùå ID —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º");
                    } catch (Exception e) {
                        log.error("Error toggling schedule for user {}: {}", userId, e.getMessage(), e);
                        sendService.sendToUser(userId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: " + e.getMessage());
                    }
                })
                .build();
    }

    public Ability deleteScheduleHiddenAbility() {
        return Ability.builder()
                .name("deleteschedulehidden")
                .info("–£–¥–∞–ª–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
                .locality(USER)
                .privacy(PUBLIC)
                .input(1)
                .action(ctx -> {
                    Long userId = ctx.user().getId();
                    if (!authorizationService.isTrustedUser(userId)) {
                        sendService.sendToUser(userId, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã");
                        return;
                    }

                    String[] args = ctx.arguments();
                    if (args.length < 1) {
                        sendService.sendToUser(userId, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /deleteschedulehidden <ID_—Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è>");
                        return;
                    }

                    try {
                        Long scheduleId = Long.parseLong(args[0]);

                        var scheduleOpt = scheduledPostService.findById(scheduleId);
                        if (scheduleOpt.isEmpty()) {
                            sendService.sendToUser(userId, "‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å ID " + scheduleId + " –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
                            return;
                        }

                        ScheduledPost schedule = scheduleOpt.get();
                        String chatTitle = commonAbilityHelper.getChatTitle(schedule.getChatId());

                        scheduledPostService.deleteSchedule(scheduleId);

                        String message = String.format(
                                """
                                        üóëÔ∏è *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!*

                                        üí¨ *–ß–∞—Ç:* %s
                                        üìã *–ì—Ä—É–ø–ø–∞:* %s
                                        ‚è∞ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:* %s
                                        üÜî *ID:* %d""",
                                chatTitle,
                                schedule.getGroupName(),
                                schedule.getDescription(),
                                scheduleId
                        );

                        sendService.sendToUser(userId, message, Constants.PARSE_MARKDOWN);
                        log.info("User {} deleted hidden schedule {}", userId, scheduleId);

                    } catch (NumberFormatException e) {
                        sendService.sendToUser(userId, "‚ùå ID —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º");
                    } catch (Exception e) {
                        log.error("Error deleting hidden schedule for user {}: {}", userId, e.getMessage(), e);
                        sendService.sendToUser(userId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: " + e.getMessage());
                    }
                })
                .build();
    }

    public Ability scheduleInfoHiddenAbility() {
        return Ability.builder()
                .name("scheduleinfohidden")
                .info("–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏")
                .locality(USER)
                .privacy(PUBLIC)
                .input(1)
                .action(ctx -> {
                    Long userId = ctx.user().getId();
                    if (!authorizationService.isTrustedUser(userId)) {
                        sendService.sendToUser(userId, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã");
                        return;
                    }

                    String[] args = ctx.arguments();
                    if (args.length < 1) {
                        sendService.sendToUser(userId, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /scheduleinfohidden <ID_—Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è>");
                        return;
                    }

                    try {
                        Long scheduleId = Long.parseLong(args[0]);
                        var scheduleOpt = scheduledPostService.findById(scheduleId);

                        if (scheduleOpt.isPresent()) {
                            ScheduledPost schedule = scheduleOpt.get();
                            String chatTitle = commonAbilityHelper.getChatTitle(schedule.getChatId());

                            StringBuilder response = new StringBuilder();
                            response.append("üìä *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫—Ä—ã—Ç–æ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏:*\n\n")
                                    .append("üÜî *ID:* ").append(schedule.getId()).append("\n")
                                    .append("üí¨ *–ß–∞—Ç:* ").append(chatTitle).append(" (ID: ").append(schedule.getChatId()).append(")\n")
                                    .append("üìã *–ì—Ä—É–ø–ø–∞:* ").append(schedule.getGroupName()).append("\n")
                                    .append("‚è∞ *–û–ø–∏—Å–∞–Ω–∏–µ:* ").append(schedule.getDescription()).append("\n")
                                    .append("‚öôÔ∏è *Cron –≤—ã—Ä–∞–∂–µ–Ω–∏–µ:* `").append(schedule.getCronExpression()).append("`\n")
                                    .append("üí¨ *–°–æ–æ–±—â–µ–Ω–∏–µ:* ").append(schedule.getMessageText()).append("\n")
                                    .append("üñºÔ∏è *–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:* ").append(schedule.getImageUrl() != null ? schedule.getImageUrl() : "–Ω–µ—Ç").append("\n")
                                    .append("üìä *–°—Ç–∞—Ç—É—Å:* ").append(schedule.getIsActive() ? "–∞–∫—Ç–∏–≤–Ω–æ ‚úÖ" : "–Ω–µ–∞–∫—Ç–∏–≤–Ω–æ ‚è∏Ô∏è").append("\n")
                                    .append("üë§ *–°–æ–∑–¥–∞–Ω–æ:* ").append(schedule.getCreatedBy()).append("\n")
                                    .append("üìÖ *–°–æ–∑–¥–∞–Ω–æ:* ").append(schedule.getCreatedAt().toLocalDate()).append("\n");

                            if (schedule.getLastSent() != null) {
                                response.append("‚úÖ *–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—Ç–ø—Ä–∞–≤–∫–∞:* ").append(schedule.getLastSent()).append("\n");
                            }

                            sendService.sendToUser(userId, response.toString(), Constants.PARSE_MARKDOWN);
                        } else {
                            sendService.sendToUser(userId, "‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å ID " + scheduleId + " –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
                        }

                    } catch (NumberFormatException e) {
                        sendService.sendToUser(userId, "‚ùå ID —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º");
                    } catch (Exception e) {
                        log.error("Error getting schedule info for user {}: {}", userId, e.getMessage(), e);
                        sendService.sendToUser(userId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: " + e.getMessage());
                    }
                })
                .build();
    }
}