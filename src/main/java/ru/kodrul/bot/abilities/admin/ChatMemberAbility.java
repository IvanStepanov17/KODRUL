package ru.kodrul.bot.abilities.admin;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.telegram.abilitybots.api.objects.Ability;
import org.telegram.abilitybots.api.objects.Locality;
import org.telegram.abilitybots.api.objects.MessageContext;
import org.telegram.abilitybots.api.util.AbilityExtension;
import ru.kodrul.bot.common.CommonAbilityHelper;
import ru.kodrul.bot.services.SendService;

import java.util.Optional;

import static org.telegram.abilitybots.api.objects.Locality.GROUP;
import static org.telegram.abilitybots.api.objects.Privacy.ADMIN;
import static org.telegram.abilitybots.api.objects.Privacy.PUBLIC;

@Slf4j
@Component
@RequiredArgsConstructor
public class ChatMemberAbility implements AbilityExtension {

    private final SendService sendService;
    private final CommonAbilityHelper commonAbilityHelper;

    public Ability getChatMembers() {
        return Ability.builder()
                .name("members")
                .info("–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö —á–∞—Ç–∞")
                .locality(Locality.GROUP)
                .privacy(PUBLIC)
                .action(ctx -> {
                    Optional<Integer> memberCount = commonAbilityHelper.getMemberCount(ctx);
                    memberCount.ifPresentOrElse(
                            count -> sendService.sendMessageToThread(ctx, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: " + count),
                            () -> sendService.sendMessageToThread(ctx, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"));

                })
                .build();
    }

    public Ability chatMembersAbility() {
        return Ability.builder()
                .name("chatmembers")
                .info("–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞")
                .locality(GROUP)
                .privacy(ADMIN)
                .action(this::getChatMembers)
                .build();
    }

    private void getChatMembers(MessageContext ctx) {
        try {
            // TODO —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
            var user = ctx.user();
            String membersInfo = String.format("""
                            üë• –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:

                            üë§ –í—ã: %s %s (ID: %d)

                            –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é""",
                    user.getFirstName(), user.getLastName(), user.getId());

            sendService.sendMessageToThread(ctx, membersInfo);

        } catch (Exception e) {
            sendService.sendMessageToThread(ctx, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ");
        }
    }
}
