package ru.kodrul.bot.abilities.admin;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Component;
import org.telegram.abilitybots.api.bot.AbilityBot;
import org.telegram.abilitybots.api.objects.Ability;
import org.telegram.abilitybots.api.util.AbilityExtension;
import ru.kodrul.bot.entity.ScheduledPost;
import ru.kodrul.bot.services.ScheduledPostService;

import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.List;

import static org.telegram.abilitybots.api.objects.Locality.GROUP;
import static org.telegram.abilitybots.api.objects.Privacy.ADMIN;

@Slf4j
@Component
@RequiredArgsConstructor
public class ScheduleAbility implements AbilityExtension {

    @Lazy
    private final AbilityBot abilityBot;
    private final ScheduledPostService scheduledPostService;

    public Ability createScheduleAbility() {
        return Ability.builder()
                .name("createschedule")
                .info("–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ - —É–∫–∞–∂–∏—Ç–µ –≥—Ä—É–ø–ø—É, –≤—Ä–µ–º—è, –∞ –∑–∞—Ç–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ")
                .locality(GROUP)
                .privacy(ADMIN)
                .action(ctx -> {
                    String fullText = ctx.update().getMessage().getText();
                    String[] parts = fullText.split("\\s+", 4); // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ 4 —á–∞—Å—Ç–∏ –º–∞–∫—Å–∏–º—É–º

                    if (parts.length < 4) {
                        abilityBot.silent().send(
                                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /createschedule <–≥—Ä—É–ø–ø–∞> <–≤—Ä–µ–º—è> <—Å–æ–æ–±—â–µ–Ω–∏–µ>\n\n" +
                                        "–ü—Ä–∏–º–µ—Ä: /createschedule –¢–µ—Å—Ç2 09:00 –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –∫–æ–º–∞–Ω–¥–∞!\n" +
                                        "–î–ª—è URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –∫–æ–Ω—Ü–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª",
                                ctx.chatId()
                        );
                        return;
                    }

                    try {
                        String groupName = parts[1];
                        String timeStr = parts[2];
                        String restOfText = parts[3];

                        String messageText;
                        String imageUrl = null;

                        String[] textParts = restOfText.split("\\s+");
                        if (textParts.length > 1 &&
                                (textParts[textParts.length - 1].startsWith("http://") ||
                                        textParts[textParts.length - 1].startsWith("https://"))) {
                            imageUrl = textParts[textParts.length - 1];
                            messageText = restOfText.substring(0, restOfText.lastIndexOf(imageUrl)).trim();
                        } else {
                            messageText = restOfText;
                        }

                        LocalTime scheduledTime = LocalTime.parse(timeStr, DateTimeFormatter.ofPattern("HH:mm"));

                        ScheduledPost schedule = scheduledPostService.createSchedule(
                                ctx.chatId(), groupName, scheduledTime, messageText, imageUrl, ctx.user().getId()
                        );

                        String response = String.format(
                                "‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n\n" +
                                        "üìã –ì—Ä—É–ø–ø–∞: %s\n" +
                                        "‚è∞ –í—Ä–µ–º—è: %s\n" +
                                        "üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: %s\n" +
                                        "%s" +
                                        "üÜî ID: %d",
                                groupName,
                                scheduledTime,
                                messageText,
                                imageUrl != null ? "üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: " + imageUrl + "\n" : "",
                                schedule.getId()
                        );

                        abilityBot.silent().send(response, ctx.chatId());

                    } catch (DateTimeParseException e) {
                        abilityBot.silent().send("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:mm", ctx.chatId());
                    } catch (Exception e) {
                        abilityBot.silent().send("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage(), ctx.chatId());
                    }
                })
                .build();
    }

    public Ability listSchedulesAbility() {
        return Ability.builder()
                .name("listschedules")
                .info("–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞")
                .locality(GROUP)
                .privacy(ADMIN)
                .action(ctx -> {
                    List<ScheduledPost> schedules = scheduledPostService.getActiveSchedulesForChat(ctx.chatId());

                    if (schedules.isEmpty()) {
                        abilityBot.silent().send("üì≠ –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π", ctx.chatId());
                        return;
                    }

                    StringBuilder response = new StringBuilder("üìÖ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:\n\n");

                    for (ScheduledPost schedule : schedules) {
                        response.append("üÜî ID: ").append(schedule.getId()).append("\n")
                                .append("üìã –ì—Ä—É–ø–ø–∞: ").append(schedule.getGroupName()).append("\n")
                                .append("‚è∞ –í—Ä–µ–º—è: ").append(schedule.getScheduledTime()).append("\n")
                                .append("üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ").append(
                                        schedule.getMessageText().length() > 50 ?
                                                schedule.getMessageText().substring(0, 50) + "..." :
                                                schedule.getMessageText()
                                ).append("\n");

                        if (schedule.getImageUrl() != null) {
                            response.append("üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: –µ—Å—Ç—å\n");
                        }

                        if (schedule.getLastSent() != null) {
                            response.append("‚úÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—Ç–ø—Ä–∞–≤–∫–∞: ").append(schedule.getLastSent().toLocalDate()).append("\n");
                        }

                        response.append("\n");
                    }

                    abilityBot.silent().send(response.toString(), ctx.chatId());
                })
                .build();
    }

    public Ability toggleScheduleAbility() {
        return Ability.builder()
                .name("toggleschedule")
                .info("–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
                .locality(GROUP)
                .privacy(ADMIN)
                .input(2)
                .action(ctx -> {
                    String[] args = ctx.arguments();
                    if (args.length < 2) {
                        abilityBot.silent().send("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /toggleschedule <ID —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è> <on|off>", ctx.chatId());
                        return;
                    }

                    try {
                        Long scheduleId = Long.parseLong(args[0]);
                        boolean isActive = "on".equalsIgnoreCase(args[1]);

                        scheduledPostService.toggleSchedule(scheduleId, isActive);

                        abilityBot.silent().send(
                                isActive ? "‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ" : "‚è∏Ô∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ",
                                ctx.chatId()
                        );

                    } catch (NumberFormatException e) {
                        abilityBot.silent().send("‚ùå ID —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º", ctx.chatId());
                    } catch (IllegalArgumentException e) {
                        abilityBot.silent().send("‚ùå " + e.getMessage(), ctx.chatId());
                    } catch (Exception e) {
                        abilityBot.silent().send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", ctx.chatId());
                    }
                })
                .build();
    }

    public Ability deleteScheduleAbility() {
        return Ability.builder()
                .name("deleteschedule")
                .info("–£–¥–∞–ª–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
                .locality(GROUP)
                .privacy(ADMIN)
                .input(1)
                .action(ctx -> {
                    String[] args = ctx.arguments();
                    if (args.length < 1) {
                        abilityBot.silent().send("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /deleteschedule <ID —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è>", ctx.chatId());
                        return;
                    }

                    try {
                        Long scheduleId = Long.parseLong(args[0]);

                        scheduledPostService.deleteSchedule(scheduleId);

                        abilityBot.silent().send("üóëÔ∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ", ctx.chatId());

                    } catch (NumberFormatException e) {
                        abilityBot.silent().send("‚ùå ID —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º", ctx.chatId());
                    } catch (IllegalArgumentException e) {
                        abilityBot.silent().send("‚ùå " + e.getMessage(), ctx.chatId());
                    } catch (Exception e) {
                        abilityBot.silent().send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", ctx.chatId());
                    }
                })
                .build();
    }

    public Ability testScheduleAbility() {
        return Ability.builder()
                .name("testschedule")
                .info("–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é")
                .locality(GROUP)
                .privacy(ADMIN)
                .input(1)
                .action(ctx -> {
                    String[] args = ctx.arguments();
                    if (args.length < 1) {
                        abilityBot.silent().send("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /testschedule <ID —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è>", ctx.chatId());
                        return;
                    }

                    try {
                        Long scheduleId = Long.parseLong(args[0]);

                        abilityBot.silent().send("üîß –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—ã—á–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.", ctx.chatId());

                    } catch (NumberFormatException e) {
                        abilityBot.silent().send("‚ùå ID —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º", ctx.chatId());
                    } catch (Exception e) {
                        abilityBot.silent().send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", ctx.chatId());
                    }
                })
                .build();
    }
}