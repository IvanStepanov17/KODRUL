package ru.kodrul.bot.abilities.admin;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.telegram.abilitybots.api.objects.Ability;
import org.telegram.abilitybots.api.util.AbilityExtension;
import ru.kodrul.bot.entity.ChatGroup;
import ru.kodrul.bot.entity.GroupMember;
import ru.kodrul.bot.services.GroupManagementService;
import ru.kodrul.bot.services.MemberManagementService;
import ru.kodrul.bot.services.SendService;
import ru.kodrul.bot.utils.Constants;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static org.telegram.abilitybots.api.objects.Locality.GROUP;
import static org.telegram.abilitybots.api.objects.Privacy.ADMIN;
import static org.telegram.abilitybots.api.objects.Privacy.PUBLIC;

@Slf4j
@Component
@RequiredArgsConstructor
public class GroupManagementAbility implements AbilityExtension {

    private final GroupManagementService groupService;
    private final MemberManagementService memberManagementService;
    private final SendService sendService;

    public Ability createGroupAbility() {
        return Ability.builder()
                .name("creategroup")
                .locality(GROUP)
                .privacy(ADMIN)
                .input(1)
                .action(ctx -> {
                    String[] args = ctx.arguments();
                    if (args.length < 1) {
                        sendService.sendMessageToThread(ctx, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /creategroup <–Ω–∞–∑–≤–∞–Ω–∏–µ> [–æ–ø–∏—Å–∞–Ω–∏–µ]");
                        return;
                    }

                    try {
                        String name = args[0];
                        String description = String.join(" ", Arrays.copyOfRange(args, 1, args.length));
                        String chatTitle = ctx.update().getMessage().getChat().getTitle();

                        ChatGroup group = groupService.createGroup(name, description, ctx.chatId(), chatTitle, ctx.user().getId());
                        sendService.sendMessageToThread(
                                ctx,
                                "‚úÖ –ì—Ä—É–ø–ø–∞ —Å–æ–∑–¥–∞–Ω–∞!\n" + groupService.formatGroupInfo(group),
                                Constants.PARSE_MARKDOWN
                        );
                    } catch (Exception e) {
                        sendService.sendMessageToThread(ctx, "‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
                    }
                })
                .build();
    }

    public Ability listGroupsAbility() {
        return Ability.builder()
                .name("listgroups")
                .locality(GROUP)
                .privacy(PUBLIC)
                .action(ctx -> {
                    List<ChatGroup> groups = groupService.getChatGroups(ctx.chatId());
                    if (groups.isEmpty()) {
                        sendService.sendMessageToThread(ctx, "–í —ç—Ç–æ–º —á–∞—Ç–µ –µ—â–µ –Ω–µ—Ç –≥—Ä—É–ø–ø");
                        return;
                    }

                    StringBuilder response = new StringBuilder("üìã –ì—Ä—É–ø–ø—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ:\n\n");
                    groups.forEach(group ->
                            response.append(groupService.formatGroupInfo(group)).append("\n\n")
                    );

                    sendService.sendMessageToThread(ctx, response.toString());
                })
                .build();
    }

    public Ability deleteGroupAbility() {
        return Ability.builder()
                .name("deletegroup")
                .locality(GROUP)
                .privacy(ADMIN)
                .input(1)
                .action(ctx -> {
                    String[] args = ctx.arguments();
                    if (args.length < 1) {
                        sendService.sendMessageToThread(ctx, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /deletegroup <–Ω–∞–∑–≤–∞–Ω–∏–µ_–≥—Ä—É–ø–ø—ã>");
                        return;
                    }

                    try {
                        String groupName = args[0];
                        Optional<ChatGroup> groupOpt = groupService.getGroupByNameWithMembersAndUsers(ctx.chatId(), groupName);

                        if (groupOpt.isPresent()) {
                            ChatGroup group = groupOpt.get();

                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –≥—Ä—É–ø–ø—ã
                            if (!group.getCreatedBy().equals(ctx.user().getId())) {
                                // TODO –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–∞—Ç–∞
                                sendService.sendMessageToThread(ctx, "‚ùå –í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –≥—Ä—É–ø–ø—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≤–∞–º–∏");
                                return;
                            }

                            String groupInfo = groupService.formatGroupInfo(group);
                            groupService.deleteGroup(group.getId());

                            sendService.sendMessageToThread(ctx, "üóëÔ∏è –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞:\n" + groupInfo, Constants.PARSE_MARKDOWN);
                        } else {
                            sendService.sendMessageToThread(ctx, "‚ùå –ì—Ä—É–ø–ø–∞ '" + groupName + "' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ");
                        }
                    } catch (Exception e) {
                        sendService.sendMessageToThread(ctx, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã: " + e.getMessage());
                    }
                })
                .build();
    }

    public Ability groupInfoAbility() {
        return Ability.builder()
                .name("groupinfo")
                .locality(GROUP)
                .privacy(PUBLIC)
                .input(1)
                .action(ctx -> {
                    String[] args = ctx.arguments();
                    if (args.length < 1) {
                        sendService.sendMessageToThread(ctx, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /groupinfo <–Ω–∞–∑–≤–∞–Ω–∏–µ_–≥—Ä—É–ø–ø—ã>");
                        return;
                    }

                    try {
                        String groupName = args[0];
                        Optional<ChatGroup> groupOpt = groupService.getGroupByNameWithMembersAndUsers(ctx.chatId(), groupName);

                        if (groupOpt.isPresent()) {
                            ChatGroup group = groupOpt.get();

                            StringBuilder response = new StringBuilder();
                            response.append("üìä *–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ*\n\n");
                            response.append(groupService.formatGroupInfoWithMembers(group)).append("\n\n");

                            if (group.getMembers() == null || group.getMembers().isEmpty()) {
                                response.append("üë• *–£—á–∞—Å—Ç–Ω–∏–∫–∏:* –≥—Ä—É–ø–ø–∞ –ø—É—Å—Ç–∞\n");
                            } else {
                                response.append("üë• *–£—á–∞—Å—Ç–Ω–∏–∫–∏ (").append(group.getMembers().size()).append("):*\n");

                                for (int i = 0; i < group.getMembers().size(); i++) {
                                    GroupMember member = group.getMembers().get(i);
                                    String userInfo = groupService.formatUserInfoForGroup(member);
                                    response.append(i + 1).append(". ").append(userInfo).append("\n");
                                }
                            }

                            sendService.sendMessageToThread(ctx, response.toString(), Constants.PARSE_MARKDOWN);
                        } else {
                            sendService.sendMessageToThread(ctx, "‚ùå –ì—Ä—É–ø–ø–∞ '" + groupName + "' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ");
                        }
                    } catch (Exception e) {
                        log.error("Error getting group info", e);
                        sendService.sendMessageToThread(ctx, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ: " + e.getMessage());
                    }
                })
                .build();
    }

    public Ability addMembersAbility() {
        return Ability.builder()
                .name("addmembers")
                .locality(GROUP)
                .privacy(ADMIN)
                .action(ctx -> memberManagementService.handleMemberOperation(ctx, true, false))
                .build();
    }

    public Ability removeMembersAbility() {
        return Ability.builder()
                .name("removemembers")
                .locality(GROUP)
                .privacy(ADMIN)
                .action(ctx -> memberManagementService.handleMemberOperation(ctx, false, false))
                .build();
    }

    public Ability groupsSummaryAbility() {
        return Ability.builder()
                .name("groupssummary")
                .locality(GROUP)
                .privacy(PUBLIC)
                .action(ctx -> {
                    List<ChatGroup> groups = groupService.getChatGroups(ctx.chatId());
                    if (groups.isEmpty()) {
                        sendService.sendMessageToThread(ctx, "–í —ç—Ç–æ–º —á–∞—Ç–µ –µ—â–µ –Ω–µ—Ç –≥—Ä—É–ø–ø");
                        return;
                    }

                    StringBuilder response = new StringBuilder("üìä *–°–≤–æ–¥–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º –≤ —á–∞—Ç–µ:*\n\n");

                    int totalMembers = 0;
                    for (ChatGroup group : groups) {
                        int memberCount = group.getMembers().size();
                        totalMembers += memberCount;
                        response.append("‚Ä¢ *").append(group.getName()).append("*")
                                .append(" - ").append(memberCount).append(" —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤");

                        if (group.getDescription() != null && !group.getDescription().isEmpty()) {
                            response.append(" - ").append(group.getDescription());
                        }
                        response.append("\n");
                    }

                    response.append("\n*–ò—Ç–æ–≥–æ:* ").append(groups.size()).append(" –≥—Ä—É–ø–ø, ")
                            .append(totalMembers).append(" —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤—Å–µ–≥–æ");

                    sendService.sendMessageToThread(ctx, response.toString(), Constants.PARSE_MARKDOWN);
                })
                .build();
    }

    public Ability groupMembersAbility() {
        return Ability.builder()
                .name("groupmembers")
                .locality(GROUP)
                .privacy(PUBLIC)
                .input(1)
                .action(ctx -> {
                    String[] args = ctx.arguments();
                    if (args.length < 1) {
                        sendService.sendMessageToThread(ctx, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /groupmembers <–Ω–∞–∑–≤–∞–Ω–∏–µ_–≥—Ä—É–ø–ø—ã>");
                        return;
                    }

                    try {
                        String groupName = args[0];
                        Optional<ChatGroup> groupOpt = groupService.getGroupByNameWithMembersAndUsers(ctx.chatId(), groupName);

                        if (groupOpt.isPresent()) {
                            ChatGroup group = groupOpt.get();

                            if (group.getMembers() == null || group.getMembers().isEmpty()) {
                                sendService.sendMessageToThread(ctx, "üë• –ì—Ä—É–ø–ø–∞ '" + groupName + "' –ø—É—Å—Ç–∞");
                                return;
                            }

                            StringBuilder response = new StringBuilder();
                            response.append("üë• *–£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã '").append(groupName).append("':*\n\n");

                            for (int i = 0; i < group.getMembers().size(); i++) {
                                GroupMember member = group.getMembers().get(i);
                                String userInfo = groupService.formatUserInfoForGroup(member);
                                response.append(i + 1).append(". ").append(userInfo).append("\n");
                            }
                            sendService.sendMessageToThread(ctx, response.toString());
                        } else {
                            sendService.sendMessageToThread(ctx, "‚ùå –ì—Ä—É–ø–ø–∞ '" + groupName + "' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
                        }
                    } catch (Exception e) {
                        log.error("Error getting group members", e);
                        sendService.sendMessageToThread(ctx, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã: " + e.getMessage());
                    }
                })
                .build();
    }

    public Ability tagUserAbility() {
        return Ability.builder()
                .name("tag")
                .locality(GROUP)
                .privacy(PUBLIC)
                .input(1)
                .action(ctx -> {
                    String[] args = ctx.arguments();
                    if (args.length != 1) {
                        sendService.sendMessageToThread(ctx, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /tag <–Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã>");
                        return;
                    }

                    try {
                        Long chatId = ctx.chatId();
                        Integer messageThreadId = ctx.update().getMessage().getMessageThreadId();
                        String groupName = args[0];

                        log.info("Tag command executed in chat: {}, thread: {} for group: {}",
                                chatId, messageThreadId, groupName);

                        Optional<ChatGroup> groupOpt = groupService.getGroupByNameWithMembersAndUsers(chatId, groupName);

                        if (groupOpt.isPresent()) {
                            ChatGroup chatGroup = groupOpt.get();
                            String userNames = groupService.getTagUsersMessage(chatGroup);

                            if (userNames != null && !userNames.trim().isEmpty()) {
                                sendService.sendMessageToThread(ctx, userNames);
                            } else {
                                sendService.sendMessageToThread(ctx, "‚ùå –ì—Ä—É–ø–ø–∞ –ø—É—Å—Ç–∞");
                            }
                        } else {
                            sendService.sendMessageToThread(ctx,
                                    "‚ùå –ì—Ä—É–ø–ø–∞ '" + groupName + "' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ");
                        }

                    } catch (Exception e) {
                        log.error("Error in tag command for chat {}: {}", ctx.chatId(), e.getMessage(), e);
                        sendService.sendMessageToThread(ctx, "‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
                    }
                })
                .build();
    }
}