package ru.kodrul.bot.abilities.admin;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Component;
import org.telegram.abilitybots.api.bot.AbilityBot;
import org.telegram.abilitybots.api.objects.Ability;
import org.telegram.abilitybots.api.util.AbilityExtension;
import ru.kodrul.bot.entity.ChatGroup;
import ru.kodrul.bot.entity.GroupMember;
import ru.kodrul.bot.handlers.MemberOperationHandler;
import ru.kodrul.bot.services.GroupManagementService;
import ru.kodrul.bot.utils.Helper;

import java.util.List;
import java.util.Optional;

import static org.telegram.abilitybots.api.objects.Locality.GROUP;
import static org.telegram.abilitybots.api.objects.Privacy.ADMIN;
import static org.telegram.abilitybots.api.objects.Privacy.PUBLIC;

@Slf4j
@Component
@RequiredArgsConstructor
public class GroupManagementAbility implements AbilityExtension {

    @Lazy
    private final AbilityBot abilityBot;
    private final GroupManagementService groupService;
    private final MemberOperationHandler memberOperationHandler;

    public Ability createGroupAbility() {
        return Ability.builder()
                .name("creategroup")
                .info("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
                .locality(GROUP)
                .privacy(ADMIN)
                .input(2)
                .action(ctx -> {
                    String[] args = ctx.arguments();
                    if (args.length < 1) {
                        abilityBot.silent().send("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /creategroup <–Ω–∞–∑–≤–∞–Ω–∏–µ> [–æ–ø–∏—Å–∞–Ω–∏–µ]", ctx.chatId());
                        return;
                    }

                    try {
                        String name = args[0];
                        String description = args.length > 1 ? args[1] : null;
                        String chatTitle = ctx.update().getMessage().getChat().getTitle();

                        ChatGroup group = groupService.createGroup(name, description, ctx.chatId(), chatTitle, ctx.user().getId());
                        abilityBot.silent().send(
                                "‚úÖ –ì—Ä—É–ø–ø–∞ —Å–æ–∑–¥–∞–Ω–∞!\n" + groupService.formatGroupInfo(group),
                                ctx.chatId()
                        );
                    } catch (Exception e) {
                        abilityBot.silent().send("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage(), ctx.chatId());
                    }
                })
                .build();
    }

    public Ability listGroupsAbility() {
        return Ability.builder()
                .name("listgroups")
                .info("–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≥—Ä—É–ø–ø—ã –≤ —á–∞—Ç–µ")
                .locality(GROUP)
                .privacy(PUBLIC)
                .action(ctx -> {
                    List<ChatGroup> groups = groupService.getChatGroups(ctx.chatId());
                    if (groups.isEmpty()) {
                        abilityBot.silent().send("–í —ç—Ç–æ–º —á–∞—Ç–µ –µ—â–µ –Ω–µ—Ç –≥—Ä—É–ø–ø", ctx.chatId());
                        return;
                    }

                    StringBuilder response = new StringBuilder("üìã –ì—Ä—É–ø–ø—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ:\n\n");
                    groups.forEach(group ->
                            response.append(groupService.formatGroupInfo(group)).append("\n\n")
                    );

                    abilityBot.silent().send(response.toString(), ctx.chatId());
                })
                .build();
    }

    public Ability deleteGroupAbility() {
        return Ability.builder()
                .name("deletegroup")
                .info("–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
                .locality(GROUP)
                .privacy(ADMIN)
                .input(1)
                .action(ctx -> {
                    String[] args = ctx.arguments();
                    if (args.length < 1) {
                        abilityBot.silent().send("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /deletegroup <–Ω–∞–∑–≤–∞–Ω–∏–µ_–≥—Ä—É–ø–ø—ã>", ctx.chatId());
                        return;
                    }

                    try {
                        String groupName = args[0];
                        Optional<ChatGroup> groupOpt = groupService.getGroupByName(ctx.chatId(), groupName);

                        if (groupOpt.isPresent()) {
                            ChatGroup group = groupOpt.get();

                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –≥—Ä—É–ø–ø—ã –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞
                            if (!group.getCreatedBy().equals(ctx.user().getId())) {
                                // TODO –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–∞—Ç–∞
                                abilityBot.silent().send("‚ùå –í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –≥—Ä—É–ø–ø—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≤–∞–º–∏", ctx.chatId());
                                return;
                            }

                            String groupInfo = groupService.formatGroupInfo(group);
                            groupService.deleteGroup(group.getId());

                            abilityBot.silent().send("üóëÔ∏è –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞:\n" + groupInfo, ctx.chatId());
                        } else {
                            abilityBot.silent().send("‚ùå –ì—Ä—É–ø–ø–∞ '" + groupName + "' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ", ctx.chatId());
                        }
                    } catch (Exception e) {
                        abilityBot.silent().send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã: " + e.getMessage(), ctx.chatId());
                    }
                })
                .build();
    }

    public Ability groupInfoAbility() {
        return Ability.builder()
                .name("groupinfo")
                .info("–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –∏ –µ—ë —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö")
                .locality(GROUP)
                .privacy(PUBLIC)
                .input(1)
                .action(ctx -> {
                    String[] args = ctx.arguments();
                    if (args.length < 1) {
                        abilityBot.silent().send("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /groupinfo <–Ω–∞–∑–≤–∞–Ω–∏–µ_–≥—Ä—É–ø–ø—ã>", ctx.chatId());
                        return;
                    }

                    try {
                        String groupName = args[0];
                        Optional<ChatGroup> groupOpt = groupService.getGroupByNameWithMembersAndUsers(ctx.chatId(), groupName);

                        if (groupOpt.isPresent()) {
                            ChatGroup group = groupOpt.get();

                            StringBuilder response = new StringBuilder();
                            response.append("üìä *–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ*\n\n");
                            response.append(formatGroupInfoWithMembers(group)).append("\n\n");

                            if (group.getMembers() == null || group.getMembers().isEmpty()) {
                                response.append("üë• *–£—á–∞—Å—Ç–Ω–∏–∫–∏:* –≥—Ä—É–ø–ø–∞ –ø—É—Å—Ç–∞\n");
                            } else {
                                response.append("üë• *–£—á–∞—Å—Ç–Ω–∏–∫–∏ (").append(group.getMembers().size()).append("):*\n");

                                for (int i = 0; i < group.getMembers().size(); i++) {
                                    GroupMember member = group.getMembers().get(i);
                                    String userInfo = formatUserInfoForGroup(member);
                                    response.append(i + 1).append(". ").append(userInfo).append("\n");
                                }
                            }

                            abilityBot.silent().sendMd(response.toString(), ctx.chatId());
                        } else {
                            abilityBot.silent().send("‚ùå –ì—Ä—É–ø–ø–∞ '" + groupName + "' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ", ctx.chatId());
                        }
                    } catch (Exception e) {
                        log.error("Error getting group info", e);
                        abilityBot.silent().send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ: " + e.getMessage(), ctx.chatId());
                    }
                })
                .build();
    }

    public Ability addMembersAbility() {
        return Ability.builder()
                .name("addmembers")
                .info("–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø—É")
                .locality(GROUP)
                .privacy(ADMIN)
                .action(ctx -> memberOperationHandler.handleMemberOperation(ctx, true))
                .build();
    }

    public Ability removeMembersAbility() {
        return Ability.builder()
                .name("removemembers")
                .info("–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –≥—Ä—É–ø–ø—ã")
                .locality(GROUP)
                .privacy(ADMIN)
                .action(ctx -> memberOperationHandler.handleMemberOperation(ctx, false))
                .build();
    }

    public Ability groupsSummaryAbility() {
        return Ability.builder()
                .name("groupssummary")
                .info("–ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –≤—Å–µ–º –≥—Ä—É–ø–ø–∞–º –≤ —á–∞—Ç–µ")
                .locality(GROUP)
                .privacy(PUBLIC)
                .action(ctx -> {
                    List<ChatGroup> groups = groupService.getChatGroups(ctx.chatId());
                    if (groups.isEmpty()) {
                        abilityBot.silent().send("–í —ç—Ç–æ–º —á–∞—Ç–µ –µ—â–µ –Ω–µ—Ç –≥—Ä—É–ø–ø", ctx.chatId());
                        return;
                    }

                    StringBuilder response = new StringBuilder("üìä *–°–≤–æ–¥–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º –≤ —á–∞—Ç–µ:*\n\n");

                    int totalMembers = 0;
                    for (ChatGroup group : groups) {
                        int memberCount = group.getMembers().size();
                        totalMembers += memberCount;
                        response.append("‚Ä¢ *").append(group.getName()).append("*")
                                .append(" - ").append(memberCount).append(" —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤");

                        if (group.getDescription() != null && !group.getDescription().isEmpty()) {
                            response.append(" - ").append(group.getDescription());
                        }
                        response.append("\n");
                    }

                    response.append("\n*–ò—Ç–æ–≥–æ:* ").append(groups.size()).append(" –≥—Ä—É–ø–ø, ")
                            .append(totalMembers).append(" —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤—Å–µ–≥–æ");

                    abilityBot.silent().sendMd(response.toString(), ctx.chatId());
                })
                .build();
    }

    public Ability groupChatMembersAbility() {
        return Ability.builder()
                .name("groupmembers")
                .info("–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã")
                .locality(GROUP)
                .privacy(PUBLIC)
                .input(1)
                .action(ctx -> {
                    String[] args = ctx.arguments();
                    if (args.length < 1) {
                        abilityBot.silent().send("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /groupmembers <–Ω–∞–∑–≤–∞–Ω–∏–µ_–≥—Ä—É–ø–ø—ã>", ctx.chatId());
                        return;
                    }

                    try {
                        String groupName = args[0];
                        Optional<ChatGroup> groupOpt = groupService.getGroupByNameWithMembersAndUsers(ctx.chatId(), groupName);

                        if (groupOpt.isPresent()) {
                            ChatGroup group = groupOpt.get();

                            if (group.getMembers() == null || group.getMembers().isEmpty()) {
                                abilityBot.silent().send("üë• –ì—Ä—É–ø–ø–∞ '" + groupName + "' –ø—É—Å—Ç–∞", ctx.chatId());
                                return;
                            }

                            StringBuilder response = new StringBuilder();
                            response.append("üë• **–£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã '").append(groupName).append("':**\n\n");

                            for (int i = 0; i < group.getMembers().size(); i++) {
                                GroupMember member = group.getMembers().get(i);
                                String userInfo = formatUserInfoForGroup(member);
                                response.append(i + 1).append(". ").append(userInfo).append("\n");
                            }

                            abilityBot.silent().send(response.toString(), ctx.chatId());
                        } else {
                            abilityBot.silent().send("‚ùå –ì—Ä—É–ø–ø–∞ '" + groupName + "' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", ctx.chatId());
                        }
                    } catch (Exception e) {
                        log.error("Error getting group members", e);
                        abilityBot.silent().send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã: " + e.getMessage(), ctx.chatId());
                    }
                })
                .build();
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    public static String formatUserInfoForGroup(GroupMember member) {
        String userName = member.getUser().getUserName();
        String firstName = member.getUser().getFirstName();
        String lastName = member.getUser().getLastName();

        StringBuilder userInfo = new StringBuilder();

        if (userName != null && !userName.isEmpty()) {
            userInfo.append("@").append(userName);
        } else {
            userInfo.append(firstName != null ? firstName : "");
            if (lastName != null && !lastName.isEmpty()) {
                if (userInfo.length() > 0) userInfo.append(" ");
                userInfo.append(lastName);
            }
        }

        userInfo.append(" (ID: ").append(member.getUser().getUserId()).append(")");

        if (Boolean.TRUE.equals(member.getUser().getIsBot())) {
            userInfo.append(" ü§ñ");
        }

        return userInfo.toString();
    }

    private String formatGroupInfoWithMembers(ChatGroup group) {
        int memberCount = (group.getMembers() != null) ? group.getMembers().size() : 0;

        return String.format(
                "üìã –ì—Ä—É–ø–ø–∞: *%s*%s\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: %d\nüÜî ID: %d",
                Helper.escapeMarkdownV2(group.getName()),
                group.getDescription() != null ? "\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: " + group.getDescription() : "",
                memberCount,
                group.getId()
        );
    }
}