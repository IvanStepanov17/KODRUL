package ru.kodrul.bot.services;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.telegram.abilitybots.api.objects.MessageContext;
import org.telegram.abilitybots.api.sender.SilentSender;
import org.springframework.transaction.annotation.Transactional;
import ru.kodrul.bot.entity.ChatGroup;
import ru.kodrul.bot.entity.GroupMember;
import ru.kodrul.bot.utils.EscapeHelper;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Optional;

@Slf4j
@Service
@RequiredArgsConstructor
public class RandomizeService {

    private final GroupManagementService groupManagementService;

    @Transactional(readOnly = true)
    public void replayRandomize(MessageContext context, SilentSender sender) {
        String[] args = context.arguments();

        if (args.length == 0) {
            sender.send("–î–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ –æ–¥–Ω–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é —É–∫–∞–∂–∏—Ç–µ –ø–æ –∫–∞–∫–∏–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º "
                    + "—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—ã–±–æ—Ä. –ü—Ä–∏–º–µ—Ä: /randomize qa front back ann", context.chatId());
            return;
        }

        StringBuilder builder = new StringBuilder().append("üé≤ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–∏:\n\n");

        boolean hasValidArguments = false;

        for (String arg : args) {
            try {
                Optional<ChatGroup> groupOpt = groupManagementService.getGroupByNameWithMembersAndUsers(context.chatId(), arg);
                if (groupOpt.isPresent()) {
                    ChatGroup group = groupOpt.get();
                    List<GroupMember> members = group.getMembers();

                    if (members.isEmpty()) {
                        builder.append(String.format("‚ùå –ì—Ä—É–ø–ø–∞ '%s' –ø—É—Å—Ç–∞\n", arg));
                        continue;
                    }

                    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                    List<GroupMember> shuffledMembers = new ArrayList<>(members);
                    Collections.shuffle(shuffledMembers);

                    // –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
                    GroupMember selectedMember = shuffledMembers.get(0);
                    String userName = formatUserName(selectedMember);

                    builder.append(String.format("üè∑Ô∏è *%s*: %s\n", EscapeHelper.escapeMarkdownV2(group.getName()), EscapeHelper.escapeMarkdownV2(userName)));
                    hasValidArguments = true;

                } else {
                    builder.append(String.format("‚ùå –ì—Ä—É–ø–ø–∞ '%s' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n", arg));
                }
            } catch (Exception e) {
                log.error("Error processing argument '{}'", arg, e);
                builder.append(String.format("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ '%s'\n", arg));
            }
        }

        if (!hasValidArguments) {
            sender.send("‚ùå –£–∫–∞–∂–∏—Ç–µ –≤–µ—Ä–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø –¥–ª—è —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /listgroups —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã.", context.chatId());
        } else {
            sender.sendMd(builder.toString(), context.chatId());
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    private String formatUserName(GroupMember member) {
        String userName = member.getUser().getUserName();
        String firstName = member.getUser().getFirstName();
        String lastName = member.getUser().getLastName();

        if (userName != null && !userName.isEmpty()) {
            return "@" + userName;
        } else {
            return String.format("%s %s",
                    firstName != null ? firstName : "",
                    lastName != null ? lastName : "").trim();
        }
    }

    /**
     * –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –≥—Ä—É–ø–ø—ã
     */
    @Transactional(readOnly = true)
    public void randomizeMultipleFromGroup(MessageContext context, SilentSender sender, String groupName, int count) {
        try {
            Optional<ChatGroup> groupOpt = groupManagementService.getGroupByNameWithMembersAndUsers(context.chatId(), groupName);
            if (groupOpt.isEmpty()) {
                sender.send("‚ùå –ì—Ä—É–ø–ø–∞ '" + groupName + "' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", context.chatId());
                return;
            }

            ChatGroup group = groupOpt.get();
            List<GroupMember> members = group.getMembers();

            if (members.isEmpty()) {
                sender.send("‚ùå –ì—Ä—É–ø–ø–∞ '" + groupName + "' –ø—É—Å—Ç–∞", context.chatId());
                return;
            }

            if (count > members.size()) {
                sender.send(String.format("‚ùå –í –≥—Ä—É–ø–ø–µ —Ç–æ–ª—å–∫–æ %d —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –Ω–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å %d",
                        members.size(), count), context.chatId());
                return;
            }

            // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏ –≤—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            List<GroupMember> shuffledMembers = new ArrayList<>(members);
            Collections.shuffle(shuffledMembers);

            StringBuilder result = new StringBuilder();
            result.append(String.format("üé≤ –°–ª—É—á–∞–π–Ω—ã–µ %d —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –≥—Ä—É–ø–ø—ã '%s':\n\n", count, groupName));

            for (int i = 0; i < count; i++) {
                GroupMember member = shuffledMembers.get(i);
                String userName = formatUserName(member);
                result.append(String.format("%d. %s\n", i + 1, userName));
            }

            sender.sendMd(result.toString(), context.chatId());

        } catch (Exception e) {
            log.error("Error in randomizeMultipleFromGroup", e);
            sender.send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–∏", context.chatId());
        }
    }

    /**
     * –ú–µ—Ç–æ–¥ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
     */
    @Transactional(readOnly = true)
    public void distributeGroupToTeams(MessageContext context, SilentSender sender, String groupName, int teamCount) {
        try {
            Optional<ChatGroup> groupOpt = groupManagementService.getGroupByNameWithMembersAndUsers(context.chatId(), groupName);
            if (groupOpt.isEmpty()) {
                sender.send("‚ùå –ì—Ä—É–ø–ø–∞ '" + groupName + "' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", context.chatId());
                return;
            }

            ChatGroup group = groupOpt.get();
            List<GroupMember> members = group.getMembers();

            if (members.isEmpty()) {
                sender.send("‚ùå –ì—Ä—É–ø–ø–∞ '" + groupName + "' –ø—É—Å—Ç–∞", context.chatId());
                return;
            }

            if (teamCount < 2 || teamCount > members.size()) {
                sender.send("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ " + members.size(), context.chatId());
                return;
            }

            // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            List<GroupMember> shuffledMembers = new ArrayList<>(members);
            Collections.shuffle(shuffledMembers);

            // –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
            List<List<GroupMember>> teams = new ArrayList<>();
            for (int i = 0; i < teamCount; i++) {
                teams.add(new ArrayList<>());
            }

            // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
            for (int i = 0; i < shuffledMembers.size(); i++) {
                int teamIndex = i % teamCount;
                teams.get(teamIndex).add(shuffledMembers.get(i));
            }

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            StringBuilder result = new StringBuilder();
            result.append(String.format("üèÜ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã '%s' –Ω–∞ %d –∫–æ–º–∞–Ω–¥:\n\n", groupName, teamCount));

            for (int i = 0; i < teams.size(); i++) {
                result.append(String.format("*–ö–æ–º–∞–Ω–¥–∞ %d* (%d —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤):\n", i + 1, teams.get(i).size()));

                for (GroupMember member : teams.get(i)) {
                    String userName = EscapeHelper.escapeMarkdownV2(formatUserName(member));
                    result.append("‚Ä¢ ").append(userName).append("\n");
                }
                result.append("\n");
            }

            sender.sendMd(result.toString(), context.chatId());

        } catch (Exception e) {
            log.error("Error in distributeGroupToTeams", e);
            sender.send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º", context.chatId());
        }
    }
}